buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'org.almibe:naps:0.0.1-SNAPSHOT'
    }
}

apply plugin: 'naps'

naps {
    defaultTemplate = 'index.html'
    globalVariables = ['title':'Title']
    contentGroups {
        mainPage {
            mainContent = 'index.md'
//            variables = ['title':"This is the title"]
        }
//        articles {
//            mainContent = 'index.html'
//            variables = ['title':"This is the title?!?!?!?!?!?!?!?!?!?!?"]
//        }
    }
}

task test(dependsOn: [':clean', ':naps']) << {
    def expectedFiles = getAllFiles('src/test/expected')
    def napsFiles = getAllFiles('build/naps/site')
    def error = false
    def fileNameIterator = napsFiles.entrySet().iterator()
    while(fileNameIterator.hasNext()) {
        def currentFile = fileNameIterator.next()
        if(expectedFiles.containsKey(currentFile.key)) {
            def expectedFile = expectedFiles.get(currentFile.key)
            if(expectedFile.text == currentFile.value.text) {
                fileNameIterator.remove()
                expectedFiles.remove(currentFile.key)
            } else {
                println ("Error: ${currentFile.key} not equal")
                error = true
                fileNameIterator.remove()
                expectedFiles.remove(currentFile.key)
            }
        } else {
            println "Error: ${currentFile.key} not in expected files"
            error = true
            fileNameIterator.remove()
        }
    }
    if(expectedFiles.size() > 0) {
        error = true
        expectedFiles.each {
            println("Error: $it not in output directory")
        }
    }
    if(error) {
        throw new Exception("Naps test failed see comment above.")
    }
}

task clean() << {
    project.file('build/').deleteDir()

}

def getAllFiles(String directory) {
    def result = [:]
    def fileTree = project.fileTree(dir:directory)
    def rootLocation = fileTree.dir.absolutePath
    fileTree.forEach {
        result.put(it.absolutePath - rootLocation, it)
    }
    return result
}